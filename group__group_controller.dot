digraph "Controller Functions"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir=LR;
  Node4 [label="Vector Inverse Clarke\l Transform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__inv__clarke.html",tooltip="Inverse Clarke transform converts the two-coordinate time invariant vector into instantaneous stator ..."];
  Node0 [label="Controller Functions",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node5 [label="Vector Park Transform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__park.html",tooltip="Forward Park transform converts the input two-coordinate vector to flux and torque components..."];
  Node3 [label="Vector Clarke Transform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__clarke.html",tooltip="Forward Clarke transform converts the instantaneous stator phases into a two-coordinate time invarian..."];
  Node2 [label="PID Motor Control",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___p_i_d.html",tooltip="A Proportional Integral Derivative (PID) controller is a generic feedback control loop mechanism wide..."];
  Node6 [label="Vector Inverse Park\l transform",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group__inv__park.html",tooltip="Inverse Park transform converts the input flux and torque components to two-coordinate vector..."];
  Node1 [label="Sine Cosine",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$group___sin_cos.html",tooltip="Computes the trigonometric sine and cosine values using a combination of table lookup and linear inte..."];
  Node0->Node1 [shape=plaintext, dir="back", style="solid"];
  Node0->Node2 [shape=plaintext, dir="back", style="solid"];
  Node0->Node3 [shape=plaintext, dir="back", style="solid"];
  Node0->Node4 [shape=plaintext, dir="back", style="solid"];
  Node0->Node5 [shape=plaintext, dir="back", style="solid"];
  Node0->Node6 [shape=plaintext, dir="back", style="solid"];
}
